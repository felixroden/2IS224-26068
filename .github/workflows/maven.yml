name: Java CI with Maven

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Job 1: Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository
      - name: Check out repository
        uses: actions/checkout@v4

      # Step 2: Set up JDK 22 with Maven cache
      - name: Set up JDK 22
        uses: actions/setup-java@v4
        with:
          java-version: '22'
          distribution: 'temurin'
          cache: maven

      # Step 3: Build the project with Maven
      - name: Build with Maven
        run: mvn -B package --file pom.xml

      # Step 4: Run Unit-tests with Maven
      - name: Run tests with Maven
        run: mvn test

      # Step 6: Upload Test Reports
      - name: Upload Test Reports
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: ${{ github.workspace }}/target/surefire-reports

      # Step 7: Process Test Reports
      - name: Process Test Reports
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Test Results
          path: ${{ github.workspace }}/target/surefire-reports/TEST-*.xml
          reporter: java-junit


  # Job 2: Sonar Analysis Job
  sonar-analysis:
    name: Sonar Code Analysis
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      # Step 1: Check out the repository code again (needed because each job runs in a fresh environment)
      - name: Check out repository
        uses: actions/checkout@v4

      # Step 2: Set up JDK 22 again for Sonar analysis
      - name: Set up JDK 22
        uses: actions/setup-java@v4
        with:
          java-version: '22'
          distribution: 'temurin'
          cache: maven

      # Step 3: Run Sonar code analysis using the Sonar Maven plugin
      - name: Sonar Code Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=felixroden_2IS224-26068 \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.organization=felixroden

  # Job 3: Lint Code Base
  lint-code:
    name: Lint Code Base
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      # Step 1: Check out the repository code again (needed because each job runs in a fresh environment)
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Full git history is needed to get a proper list of changed files within `super-linter`
          fetch-depth: 0

      # Step 2: Lint the codebase using GitHub Super Linter
      - name: Lint Code Base
        uses: github/super-linter@v4
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: "main"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 4: Measure Coverage
  measure-coverage:
    name: Measure Coverage
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      # Step 1: Check out the repository
      - name: Check out repository
        uses: actions/checkout@v4

      # Step 2: Set up JDK 22
      - name: Set up JDK 22
        uses: actions/setup-java@v4
        with:
          java-version: '22'
          distribution: 'temurin'

      # Step 3: Run Coverage (Maven command)
      - name: Run Coverage
        run: |
          mvn test jacoco:report

      # Step 4: Debug - List files to find the report
      - name: List files in target
        run: find . -name "*.xml"

      # Step 5: Add coverage to PR
      - name: Add coverage to PR
        id: jacoco
        uses: madrapps/jacoco-report@v1.7.1
        with:
          paths: |
            ${{ github.workspace }}/target/site/jacoco/jacoco.xml  # Update this path if needed
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 40
          min-coverage-changed-files: 60

      # Step 6: JaCoCo Code Coverage Report
      - name: JaCoCo Code Coverage Report
        id: jacoco_reporter
        uses: PavanMudigonda/jacoco-reporter@v5.0
        with:
          coverage_results_path: target/site/jacoco/jacoco.xml  # Update this path if needed
          coverage_report_name: Coverage
          coverage_report_title: JaCoCo
          github_token: ${{ secrets.GITHUB_TOKEN }}
          skip_check_run: false
          minimum_coverage: 80
          fail_below_threshold: false
          publish_only_summary: false

      # Step 7: Publish Coverage Job Summary (Optional)
      - name: Add Jacoco report to workflow run summary
        run: |
          echo "| Outcome | Value |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Coverage % | ${{ steps.jacoco_reporter.outputs.coverage_percentage }} |" >> $GITHUB_STEP_SUMMARY
          echo "| :heavy_check_mark: Number of Lines Covered | ${{ steps.jacoco_reporter.outputs.covered_lines }} |" >> $GITHUB_STEP_SUMMARY
          echo "| :x: Number of Lines Missed | ${{ steps.jacoco_reporter.outputs.missed_lines }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Total Number of Lines | ${{ steps.jacoco_reporter.outputs.total_lines }} |" >> $GITHUB_STEP_SUMMARY

      # Step 8: Upload Code Coverage Artifacts (Optional)
      - name: Upload Code Coverage Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report-markdown
          path: target/site/jacoco/coverage-results.md  # Correct the path based on the debug result
          retention-days: 1
